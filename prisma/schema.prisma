generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Market {
  id          Int       @id @default(autoincrement())
  title       String
  address     String?
  description String?
  phoneNumber String
  ownerName   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Category {
  id             Int        @id @default(autoincrement())
  title_tm       String
  title_ru       String?
  description_tm String?
  description_ru String?
  parentId       Int?       @map("categoryId")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  parent         Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  subcategories  Category[] @relation("CategorySubcategories")
  products       Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  vip       Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  logo      String
  products  Product[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          Int              @id @default(autoincrement())
  phoneNumber String
  password    String
  name        String?
  gender      GenderType?
  role        RoleType         @default(END_USER)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  image       String?
  orders      Order[]
  addresses   User_Addresses[]
}

model Product {
  id               Int               @id @default(autoincrement())
  name_tm          String
  name_ru          String
  color_id         Int
  gender_id        Int
  code             String            @unique
  description_tm   String?
  description_ru   String?
  brand_id         Int?
  category_id      Int
  market_id        Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  marketPrice      Int
  ourPrice         Int
  brand            Brand?            @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category         Category          @relation(fields: [category_id], references: [id], onDelete: Cascade)
  color            Filter            @relation("color", fields: [color_id], references: [id], onDelete: Cascade)
  gender           Filter            @relation("gender", fields: [gender_id], references: [id], onDelete: Cascade)
  market           Market            @relation(fields: [market_id], references: [id], onDelete: Cascade)
  gadgetedProducts Gadget_Products[]
  orderedProducts  Order_Products[]
  images           Product_Images[]
  sizes            Product_Sizes[]
}

model Filter {
  id              Int              @id @default(autoincrement())
  name_tm         String
  name_ru         String
  type            FilterType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orders          Order_Products[]
  color_products  Product[]        @relation("color")
  gender_products Product[]        @relation("gender")
}

model Product_Images {
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([image, productId])
}

model Product_Sizes {
  size_id    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product_id Int
  quantity   Int      @default(0)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([size_id, product_id])
}

model Gadget {
  id         Int               @id @default(autoincrement())
  type       String
  queue      Int
  location   GadgetLocation    @default(HOME)
  status     STATUS            @default(INACTIVE)
  title      String?
  images     Gadget_Images[]
  links      Gadget_Links[]
  productIds Gadget_Products[]
}

model Gadget_Images {
  gadgetId  Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gadget    Gadget   @relation(fields: [gadgetId], references: [id], onDelete: Cascade)

  @@id([image, gadgetId])
}

model Gadget_Links {
  gadgetId Int
  link     String
  gadget   Gadget @relation(fields: [gadgetId], references: [id], onDelete: Cascade)

  @@id([link, gadgetId])
}

model Gadget_Products {
  gadgetId  Int
  productId Int
  gadget    Gadget  @relation(fields: [gadgetId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([gadgetId, productId])
}

model Order {
  id        Int              @id @default(autoincrement())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  addressId Int
  note      String?
  userId    Int
  address   Address          @relation(fields: [addressId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  products  Order_Products[]
}

model Order_Products {
  productId Int
  quantity  Int
  sizeId    Int
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  size      Filter  @relation(fields: [sizeId], references: [id])

  @@id([productId, orderId])
}

model Address {
  id           Int              @id @default(autoincrement())
  addressLine1 String
  addressLine2 String?
  title        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  orders       Order[]
  users        User_Addresses[]
}

model User_Addresses {
  addressId Int
  userId    Int
  default   Boolean? @default(false)
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([addressId, userId])
}

enum RoleType {
  ADMIN
  BUSINESS_USER
  END_USER
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum FilterType {
  COLOR
  GENDER
  SIZE
}

enum STATUS {
  ACTIVE
  INACTIVE
}

enum GadgetLocation {
  HOME
  CATEGORY
}
