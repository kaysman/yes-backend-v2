// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  BUSINESS_USER
  END_USER
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

enum FilterType {
  COLOR
  GENDER
  SIZE
}

enum STATUS {
  ACTIVE
  INACTIVE
}

enum GadgetLocation {
  HOME
  CATEGORY
}

model Market {
  id          Int      @id @default(autoincrement())
  title       String
  address     String?
  description String?
  phoneNumber String
  ownerName   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
}

model Category {
  id             Int        @id @default(autoincrement())
  title_tm       String
  title_ru       String?
  description_tm String?
  description_ru String?
  subcategories  Category[] @relation("CategorySubcategories")
  parent         Category?  @relation("CategorySubcategories", fields: [parentId], references: [id])
  parentId       Int?       @map("categoryId")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  products Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  vip       Boolean   @default(false)
  logo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          Int         @id @default(autoincrement())
  phoneNumber String
  password    String
  name        String?
  address     String
  image       String?
  gender      GenderType?
  role        RoleType    @default(END_USER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id             Int              @id @default(autoincrement())
  name_tm        String
  name_ru        String
  ourPrice       Int
  marketPrice    Int
  color_id       Int
  color          Filter           @relation("color", fields: [color_id], references: [id], onDelete: Cascade)
  gender_id      Int
  gender         Filter           @relation("gender", fields: [gender_id], references: [id], onDelete: Cascade)
  code           String           @unique
  description_tm String?
  description_ru String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  brand_id       Int?
  brand          Brand?           @relation(fields: [brand_id], references: [id], onDelete: Cascade)
  category_id    Int
  category       Category         @relation(fields: [category_id], references: [id], onDelete: Cascade)
  market_id      Int
  market         Market           @relation(fields: [market_id], references: [id], onDelete: Cascade)
  images         Product_Images[]
  sizes          Product_Sizes[]
  gadgetedProducts Gadget_Products[]
}

model Filter {
  id              Int        @id @default(autoincrement())
  name_tm         String
  name_ru         String
  type            FilterType
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  color_products  Product[]  @relation("color")
  gender_products Product[]  @relation("gender")
}

model Product_Images {
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([image, productId])
}

model Product_Sizes {
  size_id    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product_id Int
  quantity   Int      @default(0)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@id([size_id, product_id])
}

model Gadget {
  id         Int             @id @default(autoincrement())
  title      String?
  type       String
  links      Gadget_Links[]
  images     Gadget_Images[]
  productIds Gadget_Products[]
  queue      Int
  status     STATUS @default(INACTIVE)
  location   GadgetLocation @default(HOME)
}

model Gadget_Images {
  gadgetId  Int
  gadget    Gadget   @relation(fields: [gadgetId], references: [id], onDelete: Cascade)
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([image, gadgetId])
}

model Gadget_Links {
  gadgetId Int
  gadget   Gadget @relation(fields: [gadgetId], references: [id], onDelete: Cascade)
  link     String

  @@id([link, gadgetId])
}

model Gadget_Products {
  gadgetId    Int
  gadget      Gadget @relation(fields: [gadgetId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@id([gadgetId, productId])
}
